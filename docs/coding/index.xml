<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Here is Bock&#39;s Site</title>
    <link>https://ispobock.github.io/docs/coding/</link>
    <description>Recent content in Coding on Here is Bock&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ispobock.github.io/docs/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://ispobock.github.io/docs/coding/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ispobock.github.io/docs/coding/java/</guid>
      <description>Java Coding Tips Collection相关 遍历Map Map&amp;lt;Integer, Integer&amp;gt; mp = new HashMap&amp;lt;&amp;gt;();for(Map.Entry&amp;lt;Integer, Integer&amp;gt; entry : mp.entrySet()){System.out.println(entry.getKey());System.out.println(entry.getValue());}Priority Queue class Pair implements Comparable&amp;lt;Pair&amp;gt; {int a;int b;Pair(int a, int b) {this.a = a;this.b = b;}public int compareTo(Pair o) {if(this.a &amp;lt; o.a) return -1;else if(this.a == o.a) return 0;else return 1;}}Queue&amp;lt;Pair&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;();pq.offer(new Pair(1, 2));pq.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ispobock.github.io/docs/coding/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ispobock.github.io/docs/coding/python/</guid>
      <description>Python Notes map对象 在Python2中, map返回的是一个list，在Python3中，map返回的是一个map对象，而map对象只能迭代一轮，每次迭代都会返回一个新的迭代器，迭代完所有元素后就变成空的对象了。所以如果需要对其进行多轮迭代，那需要将map对象转换为list。
data = list(map(str.strip, open(file_path).readlines()))videoset = [x.split()[0] for x in data]filenames = [x.split()[1] for x in data]conda虚拟环境管理 conda env list 查看当前存在的环境conda list 查看当前环境装的包conda create -n env_name python=2.7 创建环境conda remove -n env_name --all 删除环境conda activate env_name 激活环境conda deactivate 退出环境 jupyter notebook kernel安装 conda activate env_name 先激活该环境python -m ipykernel install --user --name kernel_name 安装kernel memmap处理大数组 很多时候我们会遇到要处理的数组过大，而内存不足的问题，这时候就需numpy.memmap。
# 创建test.</description>
    </item>
    
  </channel>
</rss>