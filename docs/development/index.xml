<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Here is Bock&#39;s Site</title>
    <link>https://ispobock.github.io/docs/development/</link>
    <description>Recent content in Development on Here is Bock&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ispobock.github.io/docs/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://ispobock.github.io/docs/development/django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ispobock.github.io/docs/development/django/</guid>
      <description>Django项目搭建流程 Django是Python的一个基于MTV（Model-Template-View）模式的后端框架。其提供了搭建网站的一系列的解决方案，给我们开发提供了很多便捷，包括后台管理（admin）、登录验证(auth)、表单处理(Form)等等，因此其可能使用起来没有Flask那么轻巧。
本文仅介绍传统Django项目的搭建流程，即后端渲染页面，生成一个html返回给前端。当然，现在出现了前后端分离的架构，后端只负责对数据进行处理，然后提供一个REST API，将处理好的数据用json的格式返回给前端，前端用JavaScript来渲染页面。前端渲染页面时不用对整个页面进行渲染，采用Diff算法，只将有更新的元素进行重新渲染，提升了性能。
创建项目 django-admin startproject 项目名  manage.py: 与创建好的项目进行命令交互的工具 __init__.py：空文件，告诉Python该目录可被看作一个包 settings.py：项目配置文件 urls.py：项目URL声明 wsgi.py：项目与WSGI兼容的Web服务器入口  数据库配置  在__init__.py中写入  import pymysqlpymysql.install_as_MySQLdb()在settings.py里面的DATABASES里面配置    ENGINE里的sqlite改为mysql   NAME：“数据库名”   USER：“用户名”   PASSWORD：密码   HOST：服务器ip   PORT：端口   创建应用 python manage.py startapp app名  admin.py：站点配置 models.py：模型 views.py：视图  激活应用 在settings.py中将自己的应用名加入到INSTALLED_APPS中
定义模型  一个数据表就对应一个模型(类) 在models.py文件中定义模型 模型类要继承models.Model类  class Grades(models.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ispobock.github.io/docs/development/restful/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ispobock.github.io/docs/development/restful/</guid>
      <description>RESTful架构 本篇是我学习RESTful的笔记。
 RESTful，即Representational State Transfer，表现层状态转换。以资源为导向，每个URI(统一资源标识符)标识一个资源，对应有get/post/put/delete方法。
（URL(统一资源定位符)是URI最普遍的的一种形式，URI包括URL和URN(统一资源名)）
传统的Web后端仅仅是以方法为导向，后端写了N个方法，每个路由映射到一个方法，用于处理请求。
Resources REST其实是资源的表现层状态转化，资源是网络中的一个实体，可以是文本、图片、音频等，用URI来进行唯一定位。
Representation 资源的表现层，即呈现出来的形式，文本可以是用txt、xml、json、html等多种形式呈现出来。
State Transfer 状态转换是指资源表现层的状态转换，用户是通过HTTP协议来与服务器进行交互，以操控网络中的资源，使其表现层发生状态转化（比如查插删改）。正好可以用HTTP的四个动作GET/POST/PUT/DELETE来完成。
小结  每个URI代表一种资源。 用户通过GET/POST/PUT/DELETE实现资源的表现层状态转化。  注意事项  URI表示资源，不该包含动词。动作由HTTP协议的GET/POST/PUT/DELETE来加以区分。 URI中不包含版本号，版本号通过HTTP请求头中的Accept字段区分。  </description>
    </item>
    
  </channel>
</rss>